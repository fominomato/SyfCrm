<?php

namespace PrincipalBundle\Entity;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\QueryBuilder;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EbUsuarioRepository extends EntityRepository implements UserProviderInterface
{

	public function refreshUser (UserInterface $user)
	{
		$class = get_class($user);
		if (!$this->supportsClass($class)) {
			throw new UnsupportedUserException("Erro. Classe nao suportada.");
		}
		return $this->loadUserByUsername($user->getUsername());
	}

	public function supportsClass ($class)
	{
		return $this->getEntityName() == $class || is_subclass_of($class, $this->getEntityName());
    }

    public function loadUserByUsername($username) {
       $user = $this->findOneByUsernameOrEmail($username);

       if(!$user) {
           throw new UsernameNotFoundException("Usuario nÃ£o encontrado: ".$username);
       }

       return $user;
    }

	public function findOneByUsernameOrEmail ($user)
	{

		return $this->createQueryBuilder("u")
			->where("u.email = :email")
			->setParameter("email", $user)
			->getQuery()
			->getOneOrNullResult();
    }

	public function getDbRole ($user)
	{
//		return $this->getRolesByEmailOrId($user);
	}

	/**
	 * Metodo para buscar e retornar usuarios
	 * @param array $params
	 * @param EbUsuario $user
	 * @return array |void
	 */
	public function getUsuarios (array $params, EbUsuario $user)
	{
		$sql = $this->createQueryBuilder("u");
		$params['u.idUsuario'] = $user->getId();

		$this->setFilter($params, $sql);
		return $sql->getQuery()->getResult();
	}

	/**
	 * Metodo para construcao de query de busca
	 * @param array $params
	 * @param $sqlBuilder
	 * @return QueryBuilder
	 */
	private function setFilter (array $params, QueryBuilder &$sqlBuilder)
	{
		$sqlBuilder->where("u.ativo = 1")
			->andWhere("u.excluido = 0");

		if (count($params) > 0) {
			foreach ($params as $key => $value) {
				$aux = preg_replace("/\./", "", $key);
				$sqlBuilder->andWhere("{$key} = :{$aux}")
					->setParameter("{$aux}", $value);
			}
		}
	}

}
